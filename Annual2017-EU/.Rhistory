###############################################################################
# FILE: /scripts/r/Neo4jFromSpreadsheet.R
# DESC: Import data from the Neo4j Model spreadsheet, upload to Neo4j
# SRC : http://stackoverflow.com/questions/25295590/how-to-create-nodes-in-rneo4j-using-vectors-or-dataframes
# IN  : /data/Neo4jModel.xlsx
# OUT : Direct Upload to Neo4j
# REQ : Neo4j instance running, database present for the user
#       .../data/Neo4jDB/Exercise
# SRC :
# NOTE: CAUTION: Script deletes existing Neo4j graph without confirmation!
#                Remove option input=FALSE to provide confirmation prompt.
###############################################################################
library(RNeo4j)
library(readxl)
library(plyr)
library(reshape2)
setwd("C:/LinkedDataWorkshop")
# Read in the spreadsheet
NeoModel<- read_excel("data/Neo4jModel.xlsx",
sheet = 'Neo4jModel',
skip = 1,
col_names = TRUE)
#-- QC Check -----------------------------------------------------------------
# Detect node names that contain spaces; illegal for R Script.
nodes <- melt (NeoModel, id.vars=c("Relation", "X__1", "Property","Value"))
nodes <- data.frame(nodes[,"value"])
# remove NA and duplicates, rename column.
nodes <- na.omit(data.frame(nodes[,1]))
nodes <- data.frame(nodes[!duplicated(nodes),1])
colnames(nodes) <- "node"
nodesWithSpaces <- data.frame(nodes[grep("^\\S+\\s+\\S+", nodes$node), ])
# if (! is.null(dim(nodesWithSpaces))){
if (nrow(nodesWithSpaces) > 0){
message("ERROR: Spaces in node names not permitted in this exercise!" )
message("ERROR: Fix node names, then re-run script.")
nodesWithSpaces
stop()
}
# Dataframes for nodes and relations
#-- To create nodes and relations
NeoNodRel <- (NeoModel[,c("StartNode", "Relation", "EndNode")])
NeoNodRel <- NeoNodRel[complete.cases(NeoNodRel),]   # Remove extra rows (NA values)
NeoNodRel$nodeId <- 1:(nrow(NeoNodRel))
#-- To create node property value pairs
NeoNPV <- NeoModel[,c("Node", "Property", "Value")]
NeoNPV <- NeoNPV[complete.cases(NeoNPV),]   # Remove extra rows (NA values)
NeoNPV$NPVId <- 1:(nrow(NeoNPV))
# Create node type based on node name
NeoNPV$type <- "undefined"
NeoNPV$type[grepl("Person", NeoNPV$Node)] <- "person"
NeoNPV$type[grepl("Treat", NeoNPV$Node)]  <- "treatment"
NeoNPV$type[grepl("Study", NeoNPV$Node)]  <- "study"
#-- QC Check -----------------------------------------------------------------
# Case 1:  Node specified in a relation is not defined in the Nodes sxn of
#          spreadsheet. Script execution terminates.
NeoNodRel$StartNodeMatch <- NeoNodRel$StartNode %in% NeoNPV$Node
NeoNodRel$EndNodeMatch <- NeoNodRel$EndNode %in% NeoNPV$Node
###############################################################################
# FILE: /scripts/r/Neo4jFromSpreadsheet.R
# DESC: Import data from the Neo4j Model spreadsheet, upload to Neo4j
# SRC : http://stackoverflow.com/questions/25295590/how-to-create-nodes-in-rneo4j-using-vectors-or-dataframes
# IN  : /data/Neo4jModel.xlsx
# OUT : Direct Upload to Neo4j
# REQ : Neo4j instance running, database present for the user
#       .../data/Neo4jDB/Exercise
# SRC :
# NOTE: CAUTION: Script deletes existing Neo4j graph without confirmation!
#                Remove option input=FALSE to provide confirmation prompt.
###############################################################################
library(RNeo4j)
library(readxl)
library(plyr)
library(reshape2)
# setwd("C:/LinkedDataWorkshop")"
setwd("C:/_gitHub/LinkedDataWorkshop/Annual2017-EU")
# Read in the spreadsheet
NeoModel<- read_excel("data/Neo4jModel.xlsx",
sheet = 'Neo4jModel',
skip = 1,
col_names = TRUE)
#-- QC Check -----------------------------------------------------------------
# Detect node names that contain spaces; illegal for R Script.
nodes <- melt (NeoModel, id.vars=c("Relation", "X__1", "Property","Value"))
nodes <- data.frame(nodes[,"value"])
# remove NA and duplicates, rename column.
nodes <- na.omit(data.frame(nodes[,1]))
nodes <- data.frame(nodes[!duplicated(nodes),1])
colnames(nodes) <- "node"
nodesWithSpaces <- data.frame(nodes[grep("^\\S+\\s+\\S+", nodes$node), ])
# if (! is.null(dim(nodesWithSpaces))){
if (nrow(nodesWithSpaces) > 0){
message("ERROR: Spaces in node names not permitted in this exercise!" )
message("ERROR: Fix node names, then re-run script.")
nodesWithSpaces
stop()
}
# Dataframes for nodes and relations
#-- To create nodes and relations
NeoNodRel <- (NeoModel[,c("StartNode", "Relation", "EndNode")])
NeoNodRel <- NeoNodRel[complete.cases(NeoNodRel),]   # Remove extra rows (NA values)
NeoNodRel$nodeId <- 1:(nrow(NeoNodRel))
#-- To create node property value pairs
NeoNPV <- NeoModel[,c("Node", "Property", "Value")]
NeoNPV <- NeoNPV[complete.cases(NeoNPV),]   # Remove extra rows (NA values)
NeoNPV$NPVId <- 1:(nrow(NeoNPV))
# Create node type based on node name
NeoNPV$type <- "undefined"
NeoNPV$type[grepl("Person", NeoNPV$Node)] <- "person"
NeoNPV$type[grepl("Treat", NeoNPV$Node)]  <- "treatment"
NeoNPV$type[grepl("Study", NeoNPV$Node)]  <- "study"
#-- QC Check -----------------------------------------------------------------
# Case 1:  Node specified in a relation is not defined in the Nodes sxn of
#          spreadsheet. Script execution terminates.
NeoNodRel$StartNodeMatch <- NeoNodRel$StartNode %in% NeoNPV$Node
NeoNodRel$EndNodeMatch <- NeoNodRel$EndNode %in% NeoNPV$Node
View(NeoNodRel)
View(NeoNodRel)
View(NeoNPV)
View(NeoNPV)
###############################################################################
# FILE: /scripts/r/Neo4jFromSpreadsheet.R
# DESC: Import data from the Neo4j Model spreadsheet, upload to Neo4j
# SRC : http://stackoverflow.com/questions/25295590/how-to-create-nodes-in-rneo4j-using-vectors-or-dataframes
# IN  : /data/Neo4jModel.xlsx
# OUT : Direct Upload to Neo4j
# REQ : Neo4j instance running, database present for the user
#       .../data/Neo4jDB/Exercise
# SRC :
# NOTE: CAUTION: Script deletes existing Neo4j graph without confirmation!
#                Remove option input=FALSE to provide confirmation prompt.
###############################################################################
library(RNeo4j)
library(readxl)
library(plyr)
library(reshape2)
# setwd("C:/LinkedDataWorkshop")"
setwd("C:/_gitHub/LinkedDataWorkshop/Annual2017-EU")
# Read in the spreadsheet
NeoModel<- read_excel("data/Neo4jModel.xlsx",
sheet = 'Neo4jModel',
skip = 1,
col_names = TRUE)
#-- QC Check -----------------------------------------------------------------
# Detect node names that contain spaces; illegal for R Script.
nodes <- melt (NeoModel, id.vars=c("Relation", "X__1", "Property","Value"))
nodes <- data.frame(nodes[,"value"])
# remove NA and duplicates, rename column.
nodes <- na.omit(data.frame(nodes[,1]))
nodes <- data.frame(nodes[!duplicated(nodes),1])
colnames(nodes) <- "node"
nodesWithSpaces <- data.frame(nodes[grep("^\\S+\\s+\\S+", nodes$node), ])
# if (! is.null(dim(nodesWithSpaces))){
if (nrow(nodesWithSpaces) > 0){
message("ERROR: Spaces in node names not permitted in this exercise!" )
message("ERROR: Fix node names, then re-run script.")
nodesWithSpaces
stop()
}
# Dataframes for nodes and relations
#-- To create nodes and relations
NeoNodRel <- (NeoModel[,c("StartNode", "Relation", "EndNode")])
NeoNodRel <- NeoNodRel[complete.cases(NeoNodRel),]   # Remove extra rows (NA values)
NeoNodRel$nodeId <- 1:(nrow(NeoNodRel))
#-- To create node property value pairs
NeoNPV <- NeoModel[,c("Node", "Property", "Value")]
NeoNPV <- NeoNPV[complete.cases(NeoNPV),]   # Remove extra rows (NA values)
NeoNPV$NPVId <- 1:(nrow(NeoNPV))
# Create node type based on node name
NeoNPV$type <- "undefined"
NeoNPV$type[grepl("Person", NeoNPV$Node)] <- "person"
NeoNPV$type[grepl("Treat", NeoNPV$Node)]  <- "treatment"
NeoNPV$type[grepl("Study", NeoNPV$Node)]  <- "study"
#-- QC Check -----------------------------------------------------------------
# Case 1:  Node specified in a relation is not defined in the Nodes sxn of
#          spreadsheet. Script execution terminates.
NeoNodRel$StartNodeMatch <- NeoNodRel$StartNode %in% NeoNPV$Node
NeoNodRel$EndNodeMatch <- NeoNodRel$EndNode %in% NeoNPV$Node
err_crit <- FALSE  # Flag for script termination
ddply(NeoNodRel, .(nodeId), function(NeoNodRel){
if (NeoNodRel$StartNodeMatch == FALSE) {
message("ERROR: Node found in relation is not a defined node." )
message(paste0("Node name:", NeoNodRel$StartNode))
err_crit <<- TRUE
}
else if (NeoNodRel$EndNodeMatch == FALSE) {
message("ERROR: Node found in relation is not a defined node." )
message(paste0("Node name:", NeoNodRel$EndNode))
err_crit <<- TRUE
}
})
if (err_crit == TRUE){
message ("Script Terminated due to errors in source data.")
stop()
}
###############################################################################
# FILE: /scripts/r/Neo4jFromSpreadsheet.R
# DESC: Import data from the Neo4j Model spreadsheet, upload to Neo4j
# SRC : http://stackoverflow.com/questions/25295590/how-to-create-nodes-in-rneo4j-using-vectors-or-dataframes
# IN  : /data/Neo4jModel.xlsx
# OUT : Direct Upload to Neo4j
# REQ : Neo4j instance running, database present for the user
#       .../data/Neo4jDB/Exercise
# SRC :
# NOTE: CAUTION: Script deletes existing Neo4j graph without confirmation!
#                Remove option input=FALSE to provide confirmation prompt.
###############################################################################
library(RNeo4j)
library(readxl)
library(plyr)
library(reshape2)
# setwd("C:/LinkedDataWorkshop")"
setwd("C:/_gitHub/LinkedDataWorkshop/Annual2017-EU")
# Read in the spreadsheet
NeoModel<- read_excel("data/Neo4jModel.xlsx",
sheet = 'Neo4jModel',
skip = 1,
col_names = TRUE)
#-- QC Check -----------------------------------------------------------------
# Detect node names that contain spaces; illegal for R Script.
nodes <- melt (NeoModel, id.vars=c("Relation", "X__1", "Property","Value"))
nodes <- data.frame(nodes[,"value"])
# remove NA and duplicates, rename column.
nodes <- na.omit(data.frame(nodes[,1]))
nodes <- data.frame(nodes[!duplicated(nodes),1])
colnames(nodes) <- "node"
nodesWithSpaces <- data.frame(nodes[grep("^\\S+\\s+\\S+", nodes$node), ])
# if (! is.null(dim(nodesWithSpaces))){
if (nrow(nodesWithSpaces) > 0){
message("ERROR: Spaces in node names not permitted in this exercise!" )
message("ERROR: Fix node names, then re-run script.")
nodesWithSpaces
stop()
}
# Dataframes for nodes and relations
#-- To create nodes and relations
NeoNodRel <- (NeoModel[,c("StartNode", "Relation", "EndNode")])
NeoNodRel <- NeoNodRel[complete.cases(NeoNodRel),]   # Remove extra rows (NA values)
NeoNodRel$nodeId <- 1:(nrow(NeoNodRel))
#-- To create node property value pairs
NeoNPV <- NeoModel[,c("Node", "Property", "Value")]
NeoNPV <- NeoNPV[complete.cases(NeoNPV),]   # Remove extra rows (NA values)
NeoNPV$NPVId <- 1:(nrow(NeoNPV))
# Create node type based on node name
NeoNPV$type <- "undefined"
NeoNPV$type[grepl("Person", NeoNPV$Node)] <- "person"
NeoNPV$type[grepl("Treat", NeoNPV$Node)]  <- "treatment"
NeoNPV$type[grepl("Study", NeoNPV$Node)]  <- "study"
#-- QC Check -----------------------------------------------------------------
# Case 1:  Node specified in a relation is not defined in the Nodes sxn of
#          spreadsheet. Script execution terminates.
NeoNodRel$StartNodeMatch <- NeoNodRel$StartNode %in% NeoNPV$Node
NeoNodRel$EndNodeMatch <- NeoNodRel$EndNode %in% NeoNPV$Node
err_crit <- FALSE  # Flag for script termination
ddply(NeoNodRel, .(nodeId), function(NeoNodRel){
if (NeoNodRel$StartNodeMatch == FALSE) {
message("ERROR: Node found in relation is not a defined node." )
message(paste0("Node name:", NeoNodRel$StartNode))
err_crit <<- TRUE
}
else if (NeoNodRel$EndNodeMatch == FALSE) {
message("ERROR: Node found in relation is not a defined node." )
message(paste0("Node name:", NeoNodRel$EndNode))
err_crit <<- TRUE
}
})
if (err_crit == TRUE){
message ("Script Terminated due to errors in source data.")
stop()
}
source('C:/_gitHub/LinkedDataWorkshop/Annual2017-EU/scripts/r/Neo4jFromSpreadsheet.R', echo=TRUE)
source('C:/_gitHub/LinkedDataWorkshop/Annual2017-EU/scripts/r/Neo4jFromSpreadsheet.R', echo=TRUE)
library(shiny); runApp('scripts/r/SelectTTLToQuery.R')
source('C:/_gitHub/LinkedDataWorkshop/Annual2017-EU/scripts/r/RDFFromSpreadsheet.R', echo=TRUE)
source('C:/_gitHub/LinkedDataWorkshop/Annual2017-EU/scripts/r/RDFFromSpreadsheet.R', echo=TRUE)
runApp('C:/_gitHub/LinkedDataWorkshop/Annual2017-EU/scripts/r/SelectTTLToQuery.R')
runApp('C:/_gitHub/LinkedDataWorkshop/Annual2017-EU/scripts/r/SelectTTLToQuery.R')
runApp('C:/_gitHub/LinkedDataWorkshop/Annual2017-EU/scripts/r/SelectTTLToQuery.R')
runApp('C:/_gitHub/LinkedDataWorkshop/Annual2017-EU/scripts/r/SelectTTLToQuery.R')
runApp('C:/_gitHub/LinkedDataWorkshop/Annual2017-EU/scripts/r/SelectTTLToQuery.R')
