source('C:/_gitHub/CTDasRDF/r/FunctionDev.R', echo=TRUE)
source('C:/_gitHub/CTDasRDF/r/FunctionDev.R', echo=TRUE)
source('C:/_gitHub/CTDasRDF/r/FunctionDev.R', echo=TRUE)
source('C:/_gitHub/CTDasRDF/r/FunctionDev.R', echo=TRUE)
source('C:/_gitHub/CTDasRDF/r/FunctionDev.R', echo=TRUE)
source('C:/_gitHub/CTDasRDF/r/FunctionDev.R', echo=TRUE)
source('C:/_gitHub/CTDasRDF/r/FunctionDev.R', echo=TRUE)
source('C:/_gitHub/CTDasRDF/r/FunctionDev.R', echo=TRUE)
source('C:/_gitHub/CTDasRDF/r/FunctionDev.R', echo=TRUE)
source('C:/_gitHub/CTDasRDF/r/FunctionDev.R', echo=TRUE)
View(newData)
View(newData)
source('C:/_gitHub/CTDasRDF/r/FunctionDev.R', echo=TRUE)
source('C:/_gitHub/CTDasRDF/r/FunctionDev.R', echo=TRUE)
View(newData)
View(newData)
source('C:/_gitHub/CTDasRDF/r/FunctionDev.R', echo=TRUE)
source('C:/_gitHub/CTDasRDF/r/FunctionDev.R', echo=TRUE)
source('C:/_gitHub/CTDasRDF/r/FunctionDev.R', echo=TRUE)
View(newData)
View(newData)
source('C:/_gitHub/CTDasRDF/r/FunctionDev.R', echo=TRUE)
source('C:/_gitHub/CTDasRDF/r/FunctionDev.R', echo=TRUE)
source('C:/_gitHub/CTDasRDF/r/FunctionDev.R', echo=TRUE)
View(vsTest)
View(vsTest)
source('C:/_gitHub/CTDasRDF/r/FunctionDev.R', echo=TRUE)
source('C:/_gitHub/CTDasRDF/r/FunctionDev.R', echo=TRUE)
source('C:/_gitHub/CTDasRDF/r/FunctionDev.R', echo=TRUE)
source('C:/_gitHub/CTDasRDF/r/FunctionDev.R', echo=TRUE)
source('C:/_gitHub/CTDasRDF/r/FunctionDev.R', echo=TRUE)
source('C:/_gitHub/CTDasRDF/r/FunctionDev.R', echo=TRUE)
source('C:/_gitHub/CTDasRDF/r/FunctionDev.R', echo=TRUE)
source('C:/_gitHub/CTDasRDF/r/FunctionDev.R', echo=TRUE)
source('C:/_gitHub/CTDasRDF/r/FunctionDev.R', echo=TRUE)
source('C:/_gitHub/CTDasRDF/r/FunctionDev.R', echo=TRUE)
source('C:/_gitHub/CTDasRDF/r/FunctionDev.R', echo=TRUE)
source('C:/_gitHub/CTDasRDF/r/FunctionDev.R', echo=TRUE)
source('C:/_gitHub/CTDasRDF/r/FunctionDev.R', echo=TRUE)
source('C:/_gitHub/CTDasRDF/r/FunctionDev.R', echo=TRUE)
source('C:/_gitHub/CTDasRDF/r/FunctionDev.R', echo=TRUE)
source('C:/_gitHub/CTDasRDF/r/FunctionDev.R', echo=TRUE)
source('C:/_gitHub/CTDasRDF/r/FunctionDev.R', echo=TRUE)
source('C:/_gitHub/CTDasRDF/r/FunctionDev.R', echo=TRUE)
source('C:/_gitHub/CTDasRDF/r/FunctionDev.R', echo=TRUE)
source('C:/_gitHub/CTDasRDF/r/FunctionDev.R', echo=TRUE)
source('C:/_gitHub/CTDasRDF/r/FunctionDev.R', echo=TRUE)
source('C:/_gitHub/CTDasRDF/r/FunctionDev.R', echo=TRUE)
source('C:/_gitHub/CTDasRDF/r/FunctionDev.R', echo=TRUE)
source('C:/_gitHub/CTDasRDF/r/FunctionDev.R', echo=TRUE)
source('C:/_gitHub/CTDasRDF/r/FunctionDev.R', echo=TRUE)
source('C:/_gitHub/CTDasRDF/r/FunctionDev.R', echo=TRUE)
source('C:/_gitHub/CTDasRDF/r/FunctionDev.R', echo=TRUE)
source('C:/_gitHub/CTDasRDF/r/FunctionDev.R', echo=TRUE)
source('C:/_gitHub/CTDasRDF/r/FunctionDev.R', echo=TRUE)
source('C:/_gitHub/CTDasRDF/r/FunctionDev.R', echo=TRUE)
source('C:/_gitHub/CTDasRDF/r/FunctionDev.R', echo=TRUE)
source('C:/_gitHub/CTDasRDF/r/FunctionDev.R', echo=TRUE)
source('C:/_gitHub/CTDasRDF/r/FunctionDev.R', echo=TRUE)
source('C:/_gitHub/CTDasRDF/r/FunctionDev.R', echo=TRUE)
source('C:/_gitHub/CTDasRDF/r/FunctionDev.R', echo=TRUE)
source('C:/_gitHub/CTDasRDF/r/FunctionDev.R', echo=TRUE)
source('C:/_gitHub/CTDasRDF/r/FunctionDev.R', echo=TRUE)
source('C:/_gitHub/CTDasRDF/r/FunctionDev.R', echo=TRUE)
source('C:/_gitHub/CTDasRDF/r/FunctionDev.R', echo=TRUE)
source('C:/_gitHub/CTDasRDF/r/FunctionDev.R', echo=TRUE)
newData[, !"id"]
newData[, ! c("id")]
newData[, ! (names(newData)="id"]
newData[, ! (names(newData)="id")]
foo <- subset(newData, select = -id)
View(foo)
View(foo)
View(newData)
View(newData)
source('C:/_gitHub/CTDasRDF/r/FunctionDev.R', echo=TRUE)
source('C:/_gitHub/CTDasRDF/r/FunctionDev.R', echo=TRUE)
foo <- subset(newData, select = -id)
View(foo)
View(foo)
?merge
source('C:/_gitHub/CTDasRDF/r/FunctionDev.R', echo=TRUE)
source('C:/_gitHub/CTDasRDF/r/FunctionDev.R', echo=TRUE)
source('C:/_gitHub/CTDasRDF/r/FunctionDev.R', echo=TRUE)
?subset
source('C:/_gitHub/CTDasRDF/r/FunctionDev.R', echo=TRUE)
source('C:/_gitHub/CTDasRDF/r/FunctionDev.R', echo=TRUE)
source('C:/_gitHub/CTDasRDF/r/FunctionDev.R', echo=TRUE)
source('C:/_gitHub/CTDasRDF/r/FunctionDev.R', echo=TRUE)
source('C:/_gitHub/CTDasRDF/r/FunctionDev.R', echo=TRUE)
source('C:/_gitHub/CTDasRDF/r/FunctionDev.R', echo=TRUE)
source('C:/_gitHub/CTDasRDF/r/FunctionDev.R', echo=TRUE)
library(shiny); runApp('C:/_gitHub/CTDasRDF/r/validation/CompTriples-Shiny-AutoLoad.R')
query
runApp('C:/_gitHub/CTDasRDF/r/validation/CompTriples-Shiny-AutoLoad.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CompTriples-Shiny-AutoLoad.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CompTriples-Shiny-AutoLoad.R')
source('C:/_gitHub/CTDasRDF/r/FunctionDev.R', echo=TRUE)
View(vsTest)
View(vsTest)
View(vsTest)
View(vsTest)
source('C:/_gitHub/CTDasRDF/r/FunctionDev.R', echo=TRUE)
source('C:/_gitHub/CTDasRDF/r/vis/ProgramFlow-Mermaid.R', echo=TRUE)
idMain14(14. buildRDF-Driver.R)
idPrefixes(prefixes.csv)
idMeta(graphMeta.R)
idMiscF(misc_F.R)
idFntreadXPT((readXPT))
idFntaddPersonId((addPersonId))
idFntassignDateType((assignDateType))
idDMxpt((DM.xpt))
idDMImpute(DM_impute.R)
idVSxpt((VS.xpt))
idVSImpute(VS_impute.R)
idCreateFrag(createFrag_F.R)
idFntaddDateFrag((addDateFrag))
idFntCreateDateDict((createDateDict))
idFntcreateFragOneDomain((createFragOneDomain))
idDMFrag(DM_Frag.R)
idVSFrag(VS_Frag.R)
idDMProcess(DM_process.R)
idSUPPDMProcess(SUPPDM_process.R)
idSUPPDMImpute(SUPPDM_impute.R)
idVSProcess(VS_process.R)
idOutMain(CDISCPILOT01-R.TTL)
idRiot(Apache RIOT)
idFin>Fin]
idStart-->idMain1
idPrefixes--READ_BY-->idMain1
idMain1-->idMain2
idMeta--SOURCED_BY-->idMain2
idMiscF--SOURCED_BY-->idMain2
idFntreadXPT--DEFINED_IN-->idMiscF
idFntaddPersonId--DEFINED_IN-->idMiscF
idFntassignDateType--DEFINED_IN-->idMiscF
idMain2-->idMain3
idMain3-->idMain4
idFntaddDateFrag--DEFINED_IN-->idCreateFrag
idFntcreateFragOneDomain--DEFINED_IN-->idCreateFrag
idFntCreateDateDict--DEFINED_IN-->idCreateFrag
idCreateFrag--SOURCED_BY-->idMain3
idMain4-->idMain5
idDMxpt--READ_BY-->idMain5
idMain5-->idMain6
idDMImpute--SOURCED_BY-->idMain6
idMain6-->idMain7
idVSxpt--READ_BY-->idMain7
idMain7-->idMain8
idVSImpute--SOURCED_BY-->idMain8
idMain8-->idMain9
idDMFrag--SOURCED_BY-->idMain9
idMain9-->idMain10
idDMProcess--SOURCED_BY-->idMain10
idMain10-->idMain11
idSUPPDMProcess--SOURCED_BY-->idMain11
idSUPPDMImpute--SOURCED_BY-->idSUPPDMProcess
idMain11-->idMain12
idVSFrag--SOURCED_BY-->idMain12
idMain12-->idMain13
idVSProcess--SOURCED_BY-->idMain13
idMain13-->idMain14
idMain14--WRITES-->idOutMain
idRiot--VALIDATES-->idOutMain
idOutMain-->idFin
classDef csv      fill:white,stroke:#8282ee,stroke-width:3px;
classDef xpt      fill:#bed6d0, stroke:#003263,stroke-width:3px, font-color:white;
classDef main     fill:#7aeb7a,stroke:#000000,stroke-width:3px;
classDef sourced  fill:#bdf5bd,stroke:#666600,stroke-width:3px;
classDef outTTL   fill:#4ba6ff,stroke:#80aea3,stroke-width:3px;
classDef fnt      fill:white,  stroke:#38e138,stroke-width:3px,stroke-dasharray: 5, 5;;
classDef validate fill:#ff8080,stroke:black,stroke-width:3px;
classDef RImpute  fill:#bdf5bd,stroke:#ff0000,stroke-width:4px;
classDef RFrag    fill:#bdf5bd,stroke:#ffa500,stroke-width:4px;
classDef RProcess fill:#bdf5bd,stroke:#0000ff,stroke-width:4px;
classDef start fill:lightgreen,stroke:#000000,stroke-width:3px;
class idStart, start;
class idMain1,idMain2,idMain3,idMain4,idMain5,idMain6,idMain7,idMain7,idMain8,idMain9,idMain10,idMain11,idMain12,idMain13,idMain14 main;
class idFntreadXPT,idFntaddPersonId,idFntassignDateType,idFntaddDateFrag,idFntcreateFragOneDomain,idFntCreateDateDict fnt;
class idMeta,idMiscF,idDMProcess,idPSDM,idVSProcess sourced;
class idDMxpt,idVSxpt xpt;
class idDMImpute,idVSImpute,idSUPPDMImpute RImpute;
class idCreateFrag,idDMFrag,idVSFrag RFrag;
class idDMProcess,idSUPPDMProcess,idVSProcess RProcess;
class idOutMain outTTL;
class idPrefixes csv;
class idRiot validate;
")
source('C:/_gitHub/CTDasRDF/r/vis/ProgramFlow-Mermaid.R', echo=TRUE)
source('C:/_gitHub/CTDasRDF/r/vis/ProgramFlow-Mermaid.R', echo=TRUE)
source('C:/_gitHub/CTDasRDF/r/vis/ProgramFlow-Mermaid.R', echo=TRUE)
library(shiny); runApp('C:/_gitHub/CTDasRDF/r/validation/CompTriples-Shiny-AutoLoad.R')
vsTest <- read.table(header=T, text='
vsorres  vstestcd vstestCat              bogusCol
69       DIABP    BloodPressureOutcome   A
77       DIABP    BloodPressureOutcome   B
61       DIABP    BloodPressureOutcome   C
61       DIABP    BloodPressureOutcome   C2
100      SYSBP    BloodPressureOutcome   D
88       SYSBP    BloodPressureOutcome   E
110      SYSBP    BloodPressureOutcome   F
65       PULSE    PulseHROutcome         G
100      PULSE    PulseHROutcome         H
100      PULSE    PulseHROutcome         H2
65       HEIGHT   HeightOutcome          I
57       HEIGHT   HeightOutcome          J
61       HEIGHT   HeightOutcome          K
61       HEIGHT   HeightOutcome          K2
')
View(vsTest)
View(vsTest)
vsTest <- read.table(header=T, text='
vsorres  vstestcd vstestCat              bogusCol
55       DIABP    BloodPressureOutcome   A
77       DIABP    BloodPressureOutcome   B
61       DIABP    BloodPressureOutcome   C
61       DIABP    BloodPressureOutcome   C2
100      SYSBP    BloodPressureOutcome   D
88       SYSBP    BloodPressureOutcome   E
110      SYSBP    BloodPressureOutcome   F
65       PULSE    PulseHROutcome         G
100      PULSE    PulseHROutcome         H
100      PULSE    PulseHROutcome         H2
65       HEIGHT   HeightOutcome          I
57       HEIGHT   HeightOutcome          J
61       HEIGHT   HeightOutcome          K
61       HEIGHT   HeightOutcome          K2
')
library(shiny); runApp('C:/_gitHub/CTDasRDF/r/validation/CompTriples-Shiny-AutoLoad.R')
library(shiny); runApp('C:/_sandbox/Applications/r/CodeEg/Shiny/ShinySystemCommand.R')
runApp('C:/_sandbox/Applications/r/CodeEg/Shiny/ShinySystemCommand.R')
runApp('C:/_sandbox/Applications/r/CodeEg/Shiny/ShinySystemCommand.R')
runApp('C:/_sandbox/Applications/r/CodeEg/Shiny/ShinySystemCommand.R')
runApp('C:/_sandbox/Applications/r/CodeEg/Shiny/ShinySystemCommand.R')
runApp('C:/_sandbox/Applications/r/CodeEg/Shiny/ShinySystemCommand.R')
runApp('C:/_sandbox/Applications/r/CodeEg/Shiny/ShinySystemCommand.R')
runApp('C:/_sandbox/Applications/r/CodeEg/Shiny/ShinySystemCommand.R')
{
test <- c("testdb_def")
}
library(shiny)
source('test.R')
install.packages("RMySQL")
source('test.R')
runApp('C:/_sandbox/Applications/r/CodeEg/Shiny/ShinySystemCommand.R')
runApp('C:/_sandbox/Applications/r/CodeEg/Shiny/ShinySystemCommand.R')
foo<-"test"
nchar(foo)
if nchar(foo) <3
if (nchar(foo) <3)
nchar(foo) < 3
nchar(foo) < 5
runApp('C:/_sandbox/Applications/r/CodeEg/Shiny/ShinySystemCommand.R')
runApp('C:/_sandbox/Applications/r/CodeEg/Shiny/ShinySystemCommand.R')
runApp('C:/_sandbox/Applications/r/CodeEg/Shiny/ShinySystemCommand.R')
runApp('C:/_sandbox/Applications/r/CodeEg/Shiny/ShinySystemCommand.R')
runApp('C:/_sandbox/Applications/r/CodeEg/Shiny/ShinySystemCommand.R')
?file.choose
file.chose()
file.choose()
runApp('C:/_sandbox/Applications/r/CodeEg/Shiny/ShinySystemCommand.R')
runApp('C:/_sandbox/Applications/r/CodeEg/Shiny/ShinySystemCommand.R')
install.packages("shinyFIles")
install.packages("shinyFiles")
shinyFilesExamples()
library(shinyFiles)
shinyFilesExamples()
shinyFilesExample()
source('~/.active-rstudio-document', echo=TRUE)
runApp('C:/_sandbox/Applications/r/CodeEg/Shiny/shinyFilesPathtoFile.R')
shinyFilesExample()
runApp('C:/_sandbox/Applications/r/CodeEg/Shiny/shinyFilesPathtoFile.R')
shinyFilesExample()
runApp('C:/_sandbox/Applications/r/CodeEg/Shiny/shinyFilesPathtoFile.R')
runApp('C:/_sandbox/Applications/r/CodeEg/Shiny/shinyFilesPathtoFile.R')
runApp('C:/_sandbox/Applications/r/CodeEg/Shiny/shinyFilesPathtoFile.R')
runApp('C:/_sandbox/Applications/r/CodeEg/Shiny/shinyFilesPathtoFile.R')
library(shiny); runApp('C:/_gitHub/CTDasRDF/r/validation/CompTriples-Shiny-AutoLoad.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CompTriples-Shiny-AutoLoad.R')
runApp('C:/_gitHub/CTDasRDF/r/validation/CompTriples-Shiny-AutoLoad.R')
?writeWorksheet
library(XLConnect)
?writeWorksheet
source('C:/_sandbox/Applications/r/CodeEg/filesAndIO/InsertMultRowXLS.R', echo=TRUE)
library(RNeo4j)
library(readxl)
library(plyr)
library(reshape2)
setwd("C:/_gitHub/LinkedDataWorkshop/Annual2017-EU")
NeoModel<- read_excel("data/Neo4jModel.xlsx",
sheet = 'Neo4jModel',
skip = 1,
col_names = TRUE)
View(NeoModel)
View(NeoModel)
###############################################################################
# FILE: /scripts/r/Neo4jFromSpreadsheet.R
# DESC: Import data from the Neo4j Model spreadsheet, upload to Neo4j
# SRC : http://stackoverflow.com/questions/25295590/how-to-create-nodes-in-rneo4j-using-vectors-or-dataframes
# IN  : /data/Neo4jModel.xlsx
# OUT : Direct Upload to Neo4j
# REQ : Neo4j instance running, database present for the user
#       .../data/Neo4jDB/Exercise
# SRC :
# NOTE: CAUTION: Script deletes existing Neo4j graph without confirmation!
#                Remove option input=FALSE to provide confirmation prompt.
###############################################################################
library(RNeo4j)
library(readxl)
library(plyr)
library(reshape2)
setwd("C:/_gitHub/LinkedDataWorkshop/Annual2017-EU")
# setwd("C:/LinkedDataWorkshop")
# Read in the spreadsheet
NeoModel<- read_excel("data/Neo4jModel.xlsx",
sheet = 'Neo4jModel',
skip = 1,
col_names = TRUE)
#-- QC Check -----------------------------------------------------------------
# Detect node names that contain spaces; illegal for R Script.
nodes <- melt (NeoModel, id.vars=c("Relation", "X__1", "Property","Value"))
nodes <- data.frame(nodes[,"value"])
# remove NA and duplicates, rename column.
nodes <- na.omit(data.frame(nodes[,1]))
nodes <- data.frame(nodes[!duplicated(nodes),1])
colnames(nodes) <- "node"
nodesWithSpaces <- data.frame(nodes[grep("^\\S+\\s+\\S+", nodes$node), ])
# if (! is.null(dim(nodesWithSpaces))){
if (nrow(nodesWithSpaces) > 0){
message("ERROR: Spaces in node names not permitted in this exercise!" )
message("ERROR: Fix node names, then re-run script.")
nodesWithSpaces
stop()
}
# Dataframes for nodes and relations
#-- To create nodes and relations
NeoNodRel <- (NeoModel[,c("StartNode", "Relation", "EndNode")])
NeoNodRel <- NeoNodRel[complete.cases(NeoNodRel),]   # Remove extra rows (NA values)
NeoNodRel$nodeId <- 1:(nrow(NeoNodRel))
#-- To create node property value pairs
NeoNPV <- NeoModel[,c("Node", "Property", "Value")]
NeoNPV <- NeoNPV[complete.cases(NeoNPV),]   # Remove extra rows (NA values)
NeoNPV$NPVId <- 1:(nrow(NeoNPV))
# Create node type based on node name
NeoNPV$type <- "undefined"
NeoNPV$type[grepl("Person", NeoNPV$Node)] <- "person"
NeoNPV$type[grepl("Treat", NeoNPV$Node)]  <- "treatment"
NeoNPV$type[grepl("Study", NeoNPV$Node)]  <- "study"
#-- QC Check -----------------------------------------------------------------
# Case 1:  Node specified in a relation is not defined in the Nodes sxn of
#          spreadsheet. Script execution terminates.
NeoNodRel$StartNodeMatch <- NeoNodRel$StartNode %in% NeoNPV$Node
NeoNodRel$EndNodeMatch <- NeoNodRel$EndNode %in% NeoNPV$Node
err_crit <- FALSE  # Flag for script termination
ddply(NeoNodRel, .(nodeId), function(NeoNodRel){
if (NeoNodRel$StartNodeMatch == FALSE) {
message("ERROR: Node found in relation is not a defined node." )
message(paste0("Node name:", NeoNodRel$StartNode))
err_crit <<- TRUE
}
else if (NeoNodRel$EndNodeMatch == FALSE) {
message("ERROR: Node found in relation is not a defined node." )
message(paste0("Node name:", NeoNodRel$EndNode))
err_crit <<- TRUE
}
})
if (err_crit == TRUE){
message ("Script Terminated due to errors in source data.")
stop()
}
# Case 2:  A defined node does not participate in a relation.
#          Issue a warning. Script execution continues.
NeoNPV$NodeMatchStartNode <- NeoNPV$Node %in% NeoNodRel$StartNode
NeoNPV$NodeMatchEndNode <- NeoNPV$Node %in% NeoNodRel$EndNode
ddply(NeoNPV, .(NPVId), function(NeoNPV){
if ( ! NeoNPV$NodeMatchStartNode & ! NeoNPV$NodeMatchEndNode) {
message(paste0("WARNING: Node not used in any relation: ", NeoNPV$Node))
}
})
#-- END QC Checks -------------------------------------------------------------
View(NeoNPV)
View(NeoNodRel)
View(NeoNodRel)
View(NeoNPV)
tail(NeoNodRel, -2)
NeoNodRel
tail(NeoNodRel, -3)
?colnames
head(NeoNodRel)
NeoNodRelNew <-NeoNodRel[,c("StartNode", "Relation", "EndNode")]
NeoNodRelNew <- tail(NeoNodRelNew, -3)
colnames(NeoNodRelNew) <- c("subject", "predicate", "object")
View(NeoNodRelNew)
?rbind
NeoNPVNew <-NeoNPV[,c("Node", "Property", "Value")]
NeoNPVNew <- tail(NeoNPVNew, -3)
colnames(NeoNPVNew) <- c("subject", "predicate", "object")
foo <- rbind(NeoNodRelNew, NeoNPVNew
)
foo
source('C:/_gitHub/LinkedDataWorkshop/Annual2017-EU/scripts/r/Neo4jFromSpreadsheet.R', echo=TRUE)
source('C:/_gitHub/LinkedDataWorkshop/Annual2017-EU/scripts/r/Neo4jFromSpreadsheet.R', echo=TRUE)
###############################################################################
# FILE: /scripts/r/Neo4jFromSpreadsheet.R
# DESC: Import data from the Neo4j Model spreadsheet, upload to Neo4j
# SRC : http://stackoverflow.com/questions/25295590/how-to-create-nodes-in-rneo4j-using-vectors-or-dataframes
# IN  : /data/Neo4jModel.xlsx
# OUT : Direct Upload to Neo4j
# REQ : Neo4j instance running, database present for the user
#       .../data/Neo4jDB/Exercise
# SRC :
# NOTE: CAUTION: Script deletes existing Neo4j graph without confirmation!
#                Remove option input=FALSE to provide confirmation prompt.
###############################################################################
library(RNeo4j)
library(readxl)
library(plyr)
library(reshape2)
library(XLConnect)
setwd("C:/_gitHub/LinkedDataWorkshop/Annual2017-EU")
# setwd("C:/LinkedDataWorkshop")
# Read in the spreadsheet
NeoModel<- read_excel("data/Neo4jModel.xlsx",
sheet = 'Neo4jModel',
skip = 1,
col_names = TRUE)
#-- QC Check -----------------------------------------------------------------
# Detect node names that contain spaces; illegal for R Script.
nodes <- melt (NeoModel, id.vars=c("Relation", "X__1", "Property","Value"))
nodes <- data.frame(nodes[,"value"])
# remove NA and duplicates, rename column.
nodes <- na.omit(data.frame(nodes[,1]))
nodes <- data.frame(nodes[!duplicated(nodes),1])
colnames(nodes) <- "node"
nodesWithSpaces <- data.frame(nodes[grep("^\\S+\\s+\\S+", nodes$node), ])
# if (! is.null(dim(nodesWithSpaces))){
if (nrow(nodesWithSpaces) > 0){
message("ERROR: Spaces in node names not permitted in this exercise!" )
message("ERROR: Fix node names, then re-run script.")
nodesWithSpaces
stop()
}
# Dataframes for nodes and relations
#-- To create nodes and relations
NeoNodRel <- (NeoModel[,c("StartNode", "Relation", "EndNode")])
NeoNodRel <- NeoNodRel[complete.cases(NeoNodRel),]   # Remove extra rows (NA values)
NeoNodRel$nodeId <- 1:(nrow(NeoNodRel))
#-- To create node property value pairs
NeoNPV <- NeoModel[,c("Node", "Property", "Value")]
NeoNPV <- NeoNPV[complete.cases(NeoNPV),]   # Remove extra rows (NA values)
NeoNPV$NPVId <- 1:(nrow(NeoNPV))
# Create node type based on node name
NeoNPV$type <- "undefined"
NeoNPV$type[grepl("Person", NeoNPV$Node)] <- "person"
NeoNPV$type[grepl("Treat", NeoNPV$Node)]  <- "treatment"
NeoNPV$type[grepl("Study", NeoNPV$Node)]  <- "study"
# QC Checks -------------------------------------------------------------------
# Case 1:  Node specified in a relation is not defined in the Nodes sxn of
#          spreadsheet. Script execution terminates.
NeoNodRel$StartNodeMatch <- NeoNodRel$StartNode %in% NeoNPV$Node
NeoNodRel$EndNodeMatch <- NeoNodRel$EndNode %in% NeoNPV$Node
err_crit <- FALSE  # Flag for script termination
ddply(NeoNodRel, .(nodeId), function(NeoNodRel){
if (NeoNodRel$StartNodeMatch == FALSE) {
message("ERROR: Node found in relation is not a defined node." )
message(paste0("Node name:", NeoNodRel$StartNode))
err_crit <<- TRUE
}
else if (NeoNodRel$EndNodeMatch == FALSE) {
message("ERROR: Node found in relation is not a defined node." )
message(paste0("Node name:", NeoNodRel$EndNode))
err_crit <<- TRUE
}
})
if (err_crit == TRUE){
message ("Script Terminated due to errors in source data.")
stop()
}
# Case 2:  A defined node does not participate in a relation.
#          Issue a warning. Script execution continues.
NeoNPV$NodeMatchStartNode <- NeoNPV$Node %in% NeoNodRel$StartNode
NeoNPV$NodeMatchEndNode <- NeoNPV$Node %in% NeoNodRel$EndNode
ddply(NeoNPV, .(NPVId), function(NeoNPV){
if ( ! NeoNPV$NodeMatchStartNode & ! NeoNPV$NodeMatchEndNode) {
message(paste0("WARNING: Node not used in any relation: ", NeoNPV$Node))
}
})
# END QC Checks ---------------------------------------------------------------
# RDF Spreadsheet Insert ------------------------------------------------------
#   Insert vuser-created alues from the Ne04j Spreadsheet into the  RDF
#     Spreadsheet for use in the RDF exercises.
#     "Shhhhh! Do not tell anyone or you will ruin the surprise later."
# Table 1 : Nodes and relations
NeoNodRelNew <-NeoNodRel[,c("StartNode", "Relation", "EndNode")]
# Omit first 3 rows of original data to get new nodes only.
NeoNodRelNew <- tail(NeoNodRelNew, -3)
colnames(NeoNodRelNew) <- c("subject", "predicate", "object")
# Table 2: Node P:V Pairs
NeoNPVNew <-NeoNPV[,c("Node", "Property", "Value")]
# Omit first 5 rows of original data to get new nodes only.
NeoNPVNew <- tail(NeoNPVNew, -3)
colnames(NeoNPVNew) <- c("subject", "predicate", "object")
# Combine the dataframes
spoDf <-  rbind(NeoNodRelNew, NeoNPVNew)
# Load RDF workbook; DO NOT create workbook if it does not exist
wb <- loadWorkbook("data/RDFModel.xlsx", create= FALSE)
# Insert into the workbook at startRow, startCol with  no header row
writeWorksheet(wb, spoDf, sheet="RDFModel",
startRow=10, startCol=1,
header=FALSE)
# Save workbook
saveWorkbook(wb)
